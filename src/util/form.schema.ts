import { Schema } from 'mongoose';

export const escalationFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    eventType: { type: String },
    dateResponseStarted: { type: Date },
    reason: { type: String },
    reasonOther: { type: String },
    dateEscalated: { type: Date },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);

export const investigationFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    dateSCDSCInformed: { type: Date },
    dateInvestigationStarted: { type: Date },
    dateEventStarted: { type: Date },
    symptoms: { type: String },
    humansCases: { type: Number },
    humansCasesHospitalized: { type: Number },
    humansDead: { type: Number },
    animalsCases: { type: Number },
    animalsDead: { type: Number },
    isCauseKnown: { type: String },
    cause: { type: String },
    isLabSamplesCollected: { type: String },
    dateSampleCollected: { type: Date },
    labResults: { type: String },
    dateLabResultsReceived: { type: Date },
    isNewCasedReportedFromInitialArea: { type: String },
    isNewCasedReportedFromNewAreas: { type: String },
    isEventSettingPromotingSpread: { type: String },
    additionalInformation: { type: String },
    riskClassification: { type: String },
    isEventInfectious: { type: String },
    eventCategories: { type: [String] },
    systemsAffectedByEvent: { type: [String] },
    responseActivities: { type: [String] },
    dateSCMOHInformed: { type: Date },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);

export const responseFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    eventType: { type: String },
    dateSCMOHInformed: { type: Date },
    dateResponseStarted: { type: Date },
    responseActivities: { type: [String] },
    otherResponseActivity: { type: String },
    outcomeOfResponse: { type: String },
    recommendations: { type: [String] },
    dateEscalated: { type: Date },
    dateOfReport: { type: Date },
    additionalInformation: { type: String },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);

export const verificationFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    source: { type: String },
    description: { type: String },
    isMatchingSignal: { type: String },
    updatedSignal: { type: String },
    isReportedBefore: { type: String },
    dateHealthThreatStarted: { type: Date },
    informant: { type: String },
    otherInformant: { type: String },
    additionalInformation: { type: String },
    dateVerified: { type: Date },
    isThreatStillExisting: { type: String },
    threatTo: { type: String },
    dateSCDSCInformed: { type: Date },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);

export const summaryFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    cause: { type: String },
    escalatedTo: { type: String },
    eventStatus: { type: String },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);

export const labFormSchema = new Schema(
  {
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    dateSampleCollected: { type: Date },
    labResults: { type: String },
    dateLabResultsReceived: { type: Date },
    via: { type: String, default: 'internet', enum: ['internet', 'sms'] },
    spot: {
      type: String,
      enum: [
        'HEBS',
        'LEBS',
        'CEBS',
        'EBS',
        'AHA',
        'CHA',
        'CHV',
        'VEBS',
        'VET',
        'SFP',
        'HCW',
        'PMEBS',
        'PEBS/MEBS',
        'CDR',
        'VIEWER',
      ],
    },
  },
  { timestamps: true },
);
